#!/bin/bash

# Copyright (C) 2021, Bayerische Motoren Werke Aktiengesellschaft (BMW AG),
#   Author: Alexander Domin (Alexander.Domin@bmw.de)
# Copyright (C) 2021, ProFUSION Sistemas e Soluções LTDA,
#   Author: Gabriel Fernandes (g7fernandes@profusion.mobi)
#
# SPDX-License-Identifier: MPL-2.0
#
# This Source Code Form is subject to the terms of the
# Mozilla Public License, v. 2.0. If a copy of the MPL was
# not distributed with this file, You can obtain one at
# http://mozilla.org/MPL/2.0/.

# shellcheck disable=SC2046
unset $(git rev-parse --local-env-vars)

BASE_PATH="$(git rev-parse --show-toplevel)"
LIB_VSS_PATH="$BASE_PATH"
CMAKE="cmake"
CLANG_TIDY="clang-tidy"

while read -r line; do
  STAGED_C_FILES_ARRAY+=("$line")
done <<< "$(git diff --cached --diff-filter=ACMR --oneline --name-only)"

if [ -n "$CMAKE_PREFIX_PATH" ]; then
  IFS=';' read -ra CMAKE_PATHS <<< "$CMAKE_PREFIX_PATH"
  for ITEM in "${CMAKE_PATHS[@]}"; do
    LINKER_PATHS+=" -L$ITEM"
  done
fi

# checks if array contains a given element `array_contains [array] [element]`
array_contains () {
  local array="$1[@]"
  local seeking=$2
  local in=1
  for element in "${!array}"; do
      if [[ $element == "$seeking" ]]; then
          in=0
          break
      fi
  done
  return $in
}

check_unstaged_modifications() {
  local WARN_FLAG
  WARN_FLAG=0
  for F in $(git diff --diff-filter=ACMR --oneline --name-only); do
    if array_contains STAGED_C_FILES_ARRAY "$F"; then
      printf "\033[0;31m Warning!\033[0m \033[1m Modified file not commited:\033[0m %s\n" "$F"
      WARN_FLAG=1
      sleep 1
    fi
  done
  if [[ $WARN_FLAG == 1 ]]; then
    printf "\033[0m \033[1mMake sure that you are not forgeting to stage the files above!\033[0m\n"
    echo "Commit process will continue in 5s. Do a Ctrl + C to abort..."
    sleep 5
  fi
}

test_dependencies() {
  if ! [ -x "$(command -v $CMAKE)" ]; then
    printf "\033[41mPlease install cmake (apt install cmake)\033[0m\n"
    return 1
  fi

  if ! [ -x "$(command -v $CLANG_TIDY)" ]; then
    printf "\033[41mPlease install clang-tidy (apt install clang-tidy)\033[0m\n"
    return 1
  fi

  return 0
}

generate_compile_commands() {
  if [ ! -e "$LIB_VSS_PATH/build/compile_commands.json" ]; then
    if [ -d "$LIB_VSS_PATH/build" ] && ! [ -w "$LIB_VSS_PATH/build" ]; then
      printf "\033[41m The folder %s/build doens't have write permision\033[0m\n" "$LIB_VSS_PATH"
      return 1
    fi

    if ! cmake -DCMAKE_PREFIX_PATH="$CMAKE_PREFIX_PATH" -DCMAKE_STATIC_LINKER_FLAGS="" \
         -DCMAKE_SHARED_LINKER_FLAGS="-fuse-ld=lld $LINKER_PATHS" \
         -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld $LINKER_PATHS" -B"$LIB_VSS_PATH"/build -S"$LIB_VSS_PATH";
      then
        printf "\033[41mIt was not possible generate the file compile_commands.json\033[0m\n"
        if [ -z "$CMAKE_PREFIX_PATH" ]; then
          printf "If packages aren't being found, try exporting CMAKE_PREFIX_PATH passing to\n"
          printf "the path to the package.\n"
        fi
      return 1
    fi
  fi
  return 0
}

call_clang_tidy() {
  staged_files=$(git diff --cached --name-only --diff-filter=ACM | grep "[.]\(cpp\|h\|hpp\)$" | grep -v '/generated/')

  num_staged_files=0
  if [ -n "${staged_files}" ]; then
    num_staged_files=$(printf "%s\n" "$staged_files" | wc -l)
  fi

  echo "Linting ${num_staged_files} C++ files with clang-tidy"

  if [ "${num_staged_files}" -gt 0 ]; then
    i=1
    echo "${staged_files}" | while IFS= read -r file; do
      printf "\033[1m[%3d/%d] clang-tidy %s\033[0m\n" ${i} "${num_staged_files}" "$file"
      r="$($CLANG_TIDY -checks="$LIB_VSS_PATH"/.clang-tidy -p="$LIB_VSS_PATH"/build/compile_commands.json "$BASE_PATH"/"$file" 2>/dev/null)"
      if [ -n "${r}" ]; then
        printf "\033[41mERRORS:\033[0m %s\n" "$file"
        echo "$r"
        printf "\033[41mCLANG-TIDY:\033[0m Fix clang-tidy errors and try again\n"
        return 1
      fi
      i=$((i + 1))
    done || exit 1
  fi

  printf "\033[42mCLANG-TIDY SUCCEEDED\033[0m\n"
  return 0
}

test_dependencies &&
generate_compile_commands &&
call_clang_tidy &&
check_unstaged_modifications
